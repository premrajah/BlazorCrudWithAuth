@page "/todolist"

@using BlazorCrudWithAuth.Data
@using BlazorCrudWithAuth.Services
@using BlazorCrudWithAuth.Models

@inject IToDoListService service



<h1>To Do List</h1>
<p>This component demonstrates fetching data from database.</p>

@if(toDoList == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Task</th>
                <th>Status</th>
                <th>Due Date</th>
                <th>Edit</th>
                <th>Delete</th>
            </tr>
        </thead>
        <tbody>
            @foreach(var toDoItem in toDoList)
            {
            <tr>
                <td>@toDoItem.Name</td>
                <td>@toDoItem.Status</td>
                <td>@toDoItem.DueDate.ToShortDateString()</td>

                <td><input type="button" class="btn btn-primary" @onclick="@(() => PrepareForEdit(toDoItem))" data-toggle="modal" data-target="#taskModal" value="Edit" /></td>
                <td><input type="button" class="btn btn-danger" value="Delete" /></td>
            </tr>
            }
        </tbody>
    </table>
}

<div>
    <input type="button" data-toggle="modal" data-target="#taskModal" class="btn btn-primary" value="Add Task" />
</div>

<TaskDetail TaskObject=taskObject DataChanged="@DataChanged">
    <CustomHeader>@customHeader</CustomHeader>
</TaskDetail>

@code {
    List<ToDo> toDoList;
    ToDo taskObject = new ToDo();

    string customHeader = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        toDoList = await service.Get();
    }

    private void InitializeTaskObject()
    {   
        
        taskObject = new ToDo();
        taskObject.DueDate = DateTime.Now;
        customHeader = "Add New Task";
    }


    private async void DataChanged()
    {
        toDoList = await service.Get();
        StateHasChanged();
    }

    private void PrepareForEdit(ToDo task)
    {
        customHeader = "Edit Task";
        taskObject = task;
    }
}
